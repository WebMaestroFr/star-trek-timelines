/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv from "ajv";
import PlayerJSON from "./json";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export { PlayerJSON };
export const PlayerJSONSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  properties: {
    action: {
      enum: ["update"],
      type: "string"
    },
    player: {
      defaultProperties: [],
      properties: {
        character: {
          defaultProperties: [],
          properties: {
            crew: {
              items: {
                additionalProperties: true,
                properties: {},
                type: "object"
              },
              type: "array"
            },
            display_name: {
              type: "string"
            }
          },
          required: ["crew", "display_name"],
          type: "object"
        },
        dbid: {
          type: "number"
        },
        id: {
          type: "number"
        }
      },
      required: ["character", "dbid", "id"],
      type: "object"
    }
  },
  required: ["action", "player"],
  type: "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isPlayerJSON = ajv.compile(PlayerJSONSchema) as ValidateFunction<
  PlayerJSON
>;
export default function validate(value: unknown): PlayerJSON {
  if (isPlayerJSON(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isPlayerJSON.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "PlayerJSON" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
